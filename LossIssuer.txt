import { filterColumnsInData } from './renderer/dataProcessor.js';
import processData from './renderer/dataProcessor.js';
import createBarChart from './charts/BarChart.js';
import { filteredEADMainData, getEADMainDataContainer } from './CVaR.js';

let LossIssuerChartRating;
let LossIssuerChartMarket;
let LossIssuerDataContainerRating;
let LossIssuerDataContainerMarket;

export function handleLossIssuerMainData(receivedData, type) {
  const dataContainerId = type === 'rating' ? 'LossIssuerDataContainerRating' : 'LossIssuerDataContainerMarket';
  const chartId = type === 'rating' ? 'LossIssuerChartRating' : 'LossIssuerChartMarket';

  let LossIssuerDataContainer = document.getElementById(dataContainerId);

  if (LossIssuerDataContainer && receivedData) {
    let sortedData = processAndSortLossIssuerData(receivedData);
    const LossIssuerDataHTML = processData(sortedData, `sortedLossesIssuerMain_${type}`);
    LossIssuerDataContainer.innerHTML = LossIssuerDataHTML;

    createLossIssuerChart(sortedData, chartId);
  }
}

export function setupLossIssuerUI() {
  let EADMainDataContainer = getEADMainDataContainer();
  LossIssuerDataContainerRating = document.getElementById('LossIssuerDataContainerRating');
  LossIssuerDataContainerMarket = document.getElementById('LossIssuerDataContainerMarket');

  // Initially hide all containers
  if (EADMainDataContainer) EADMainDataContainer.style.display = 'none';
  if (LossIssuerDataContainerRating) LossIssuerDataContainerRating.style.display = 'none';
  if (LossIssuerDataContainerMarket) LossIssuerDataContainerMarket.style.display = 'none';

  setupEventListeners();
}

function setupEventListeners() {
  const lossIssuerRatingButton = document.querySelector('.chart-button[data-chart="LossIssuerChartRating"]');
  const lossIssuerMarketButton = document.querySelector('.chart-button[data-chart="LossIssuerChartMarket"]');
  const eadButton = document.querySelector('.chart-button[data-chart="EADChart"]');
  const lgdButton = document.querySelector('.chart-button[data-chart="LGDChart"]');
  
  toggleDisplay('EAD');

  lossIssuerRatingButton.addEventListener('click', () => toggleDisplay('LossIssuerRating'));
  lossIssuerMarketButton.addEventListener('click', () => toggleDisplay('LossIssuerMarket'));
  eadButton.addEventListener('click', () => toggleDisplay('EAD'));
  lgdButton.addEventListener('click', () => toggleDisplay('LGD'));
}

function toggleDisplay(chartType) {
  const dataContainers = {
    'EAD': 'EADMainDataContainer',
    'LossIssuerRating': 'LossIssuerDataContainerRating',
    'LossIssuerMarket': 'LossIssuerDataContainerMarket',
  };

  const chartContainers = {
    'EAD': 'EADChartContainer',
    'LGD': 'LGDChartContainer', 
    'LossIssuerRating': 'LossIssuerChartContainerRating',
    'LossIssuerMarket': 'LossIssuerChartContainerMarket'
  };

  // Toggle data containers
  Object.keys(dataContainers).forEach(key => {
    const container = document.getElementById(dataContainers[key]);
    if (container) {
      container.style.display = (key === chartType || (key === 'EAD' && chartType === 'LGD')) ? 'block' : 'none';
    }
  });

  // Toggle chart containers
  Object.keys(chartContainers).forEach(key => {
    const chartContainer = document.getElementById(chartContainers[key]);
    if (chartContainer) {
      chartContainer.style.display = key === chartType ? 'block' : 'none';
    }
  });
}

export function processAndSortLossIssuerData(receivedData) {
  let columns = ['CONVI', 'DEFAULTS', 'ISSUER_RANK', 'LOSS'];
  let filteredData = filterColumnsInData(receivedData, columns);

  // Sort the data
  return filteredData;
}

export function createLossIssuerChart(data, chartId) {
  if (window[chartId]) {
    window[chartId].destroy();
  }

  const labels = data.map(d => d.ISSUER_RANK);
  const values = data.map(d => d.LOSS);

  window[chartId] = createBarChart({ 
    labels: labels, 
    datasets: [{ 
      label: 'Aggregated Losses per Issuer',
      data: values, 
      backgroundColor: 'rgba(70, 192, 230, 0.7)', 
      borderColor: 'rgba(70, 192, 230, 0.7)' 
    }] 
  }, chartId, 'bar', 'y');
}
